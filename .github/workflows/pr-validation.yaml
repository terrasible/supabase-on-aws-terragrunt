name: PR Validation

on:
  pull_request:
    branches: [master, main]

permissions:
  contents: read
  id-token: write
  pull-requests: write

env:
  TG_VERSION: v0.87.0
  TF_VERSION: 1.9.5
  TF_PATH: /usr/bin/terraform

jobs:
  format:
    name: Terraform Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v3
        with:
          terragrunt-version: ${{ env.TG_VERSION }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Terraform Format Check
        run: make fmt TF_PATH=${{ env.TF_PATH }}

  lint:
    name: TFLint
    runs-on: ubuntu-latest
    needs: format
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v5
        with:
          tflint_version: v0.52.0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v3
        with:
          terragrunt-version: ${{ env.TG_VERSION }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Initialize TFLint
        run: tflint --init --config=.tflint.hcl

      - name: Run TFLint
        run: make lint TF_PATH=${{ env.TF_PATH }}

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: format
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.33.0
        with:
          scan-type: "config"
          scan-ref: "."
          trivy-config: "trivy.yaml"
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  # docs:
  #   name: Documentation
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #       with:
  #         token: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Render terraform docs inside the README.md and push changes back to PR branch
  #       uses: terraform-docs/gh-actions@v1.4.1
  #       with:
  #         working-dir: .
  #         output-file: README.md
  #         output-method: inject
  #         git-push: "true"

  validate: # Syntax check
    name: Terraform Validate
    runs-on: ubuntu-latest
    needs: [lint, security]
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with: { terraform_version: "${{ env.TF_VERSION }}" }
      - uses: autero1/action-terragrunt@v3
        with:
          terragrunt-version: ${{ env.TG_VERSION }}
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - run: make validate TF_PATH=${{ env.TF_PATH }}

  plan: # Preview changes
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with: { terraform_version: "${{ env.TF_VERSION }}" }
      - uses: autero1/action-terragrunt@v3
        with:
          terragrunt-version: ${{ env.TG_VERSION }}
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - run: make plan TF_PATH=${{ env.TF_PATH }} # Generate plans
